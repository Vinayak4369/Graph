import java.util.*;
public class MyClass{
    
    public static void markVisitedConnectedToIt(int i, int j, int[][] graph, boolean[][] visited){
        if(i<0 || i>=graph.length || j<0 || j>=graph[0].length || graph[i][j]==1 || visited[i][j]==true){
            return;
        }
        visited[i][j] = true;
        markVisitedConnectedToIt(i-1,j,graph,visited);
        markVisitedConnectedToIt(i+1,j,graph,visited);
        markVisitedConnectedToIt(i,j-1,graph,visited);
        markVisitedConnectedToIt(i,j+1,graph,visited);
    }
    
    public static void main(String []args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int [][]graph = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                graph[i][j] = sc.nextInt();
            }
        }
        boolean [][]visited = new boolean[n][m];
        int count = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(graph[i][j]==0 && visited[i][j]==false){
                    markVisitedConnectedToIt(i,j,graph,visited);
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
/*
In this question 0 represents part of land, 1 represents part of water. We need to count the number of island on water.

Approach is - We will run a loop to visit each elements of matrix if it's zero, we will mark all the zeroes connected by it as visited and thus we get one island
and we will search for more univisted zeroes and mark all zeroes connected by it as visited, we will count the number of times we needed to do it
means the number of islands there are in matrix

This is a slight different question as here graph is in the form of matrix.

INPUT IS
8 8
0 0 1 1 1 1 1 1
0 0 1 1 1 1 1 1
1 1 1 1 1 1 1 0
1 1 0 0 0 1 1 0
1 1 1 1 0 1 1 0
1 1 1 1 0 1 1 0
1 1 1 1 1 1 1 0
1 1 1 1 1 1 1 0

OUTPUT is
3
*/
