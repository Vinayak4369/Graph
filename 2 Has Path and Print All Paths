import java.util.*;
public class MyClass {
    
    static class Edge implements Comparable<Edge>{//implemented comparable so that we can sort Edges, as to print all paths lexicographically(dictionary order) we 
        int src;                                    //need the list stored at each index of adjacemcyList to be sorted, so that first we tries to find the path from
        int nbr;                                    //lower vertex to higher vertex(1,2,3,....)
        int wt;
        Edge(int src, int nbr, int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
        public String toString(){
            return String.valueOf(nbr);
        }
        public int compareTo(Edge comparedEdge){
            return this.nbr - comparedEdge.nbr;
        }
    }
    
    public static boolean hasPath(ArrayList<ArrayList<Edge>> adj, int src, int dest, boolean []visited){
        if(src == dest){
            return true;
        }
        visited[src] = true;
        for(Edge x : adj.get(src)){
            if(!visited[x.nbr] && hasPath(adj,x.nbr,dest,visited))
                return true;
        }
        return false;
    }
    
    public static void printAllPaths(int src, int dest, ArrayList<ArrayList<Edge>> adj, boolean[] visited, String psf){
        visited[src]=true;
        if(src == dest){
            System.out.println(psf+src);
        }
        for(Edge e : adj.get(src)){
            if(visited[e.nbr]==false){
                printAllPaths(e.nbr,dest,adj,visited,psf+src+" ");
                visited[e.nbr] = false; //It's bcause i have observed that in this program visited is getting passed through refrence duw to which once the longest
            }                           //path is printed all members becomes visited and next path isn't printed    
        }                               //if the mechanism of passing is call by value only , then there is no need for this line.
    }
    
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        int e = sc.nextInt();
        ArrayList<ArrayList<Edge>> adj = new ArrayList<>(v+1);
        for(int i=0;i<v+1;i++){
            adj.add(new ArrayList<Edge>());
        }
        for(int i=0;i<e;i++){
            int src = sc.nextInt();
            int dest = sc.nextInt();
            int wt = sc.nextInt();
            adj.get(src).add(new Edge(src,dest,wt));
            adj.get(dest).add(new Edge(dest,src,wt));
        }
        int src = sc.nextInt();
        int dest = sc.nextInt();
        boolean[] visited = new boolean[v+1];
        for(int i=0;i<=v;i++){
            Collections.sort(adj.get(i));
        }
        System.out.println(hasPath(adj,src,dest,visited));
        Arrays.fill(visited,false);
        printAllPaths(src,dest,adj,visited,"");
    }
    /*Input is....if we remove the sorting part we will get the path in the order edges are feed, otherwise we will get path lexicographically
        7 8
        4 6 10
        5 6 10
        4 5 10
        3 4 10
        0 3 10
        2 3 10
        1 2 10
        0 1 10
        0
        6
    */
}
